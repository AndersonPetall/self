会话控制
是什么? 
  HTTP协议是一个无状态的协议, 它无法区分多次请求是否发送自同一客户端.
  而我们在实际的使用中, 却有大量的这种需求, 我们需要通过会话的控制级来解决该问题
  

COOKIE
是什么?
  COOKIE本质是一个储存在浏览器的文本, 随着 http 请求自动传递给服务器. 
  也可以说 COOKIE 是一个头 (请求头/响应头):
    服务器以响应头的形式将 COOKIE 发送给浏览器
    浏览器收到以后会自动将 COOKIE 保存
    浏览器再次访问服务器的时候, 会以请求头的形式将 COOKIE 发送
    服务器就可以通过价差浏览器发回的 COOKIE 来识别出不同的浏览器
注意
  COOKIE 虽然存在于浏览器端, 但是在电脑中不能直接查看 COOKIE 的内容  ->  防止被修改和查询信息, 服务器通过 COOKIE 识别用户, 一旦COOKIE被获取, 用户信息也可能被获取
    查看: COOKIE 能在浏览器设置中 查询并找到
  COOKIE 是按照域名进行分类和保存的
    ==> 发送 COOKIE 的时候, 只会携带当前域名下的 COOKIE 进行请求
    163.com 和 www.163.com 不是同一个域名
      顶级域名: 163.com  顶级域名将拥有下面的所有二级域名  qq.com -> v.qq.com / music.qq.com / area.qq.com
      二级域名: www.163.com
  set-cookie 里面的 "path=/" 是用来设置此 cookie 生效的特性,  /表示此 cookie 在当前的网站下都可用 (EG: Set-Cookie: email=123%40gmail.com; Path=/)
  COOKIE 的时效性
    带有时效性的 COOKIE, 时间一到便被销毁, 关闭浏览器不会销毁此 COOKIE  ==>  用户每过段时间便自动退出, 此时需要再次登录
    不带时效性的 COOKIE, 浏览期间一致有效, 关闭浏览器则会销毁此 COOKIE


COOKIE的操作  
  种类: 设置 / 读取 / 清除
  流程: 引入 -> 设置中间件 -> 设置 COOKIE
EG
COOKIE的设置 
  const express = require("express");  const app = express();  
  var cookieParser = require("cookie-parser");
  app.use(cookieParser());
  app.get("/set-cookie", (request, response) => {
    response.cookie("name", "xiaohigh", { maxAge: 3 * 60 * 1000 }); //设置带有时效性的cookie  单位: 毫秒  时间一到,当前cookie失效(消失)
    response.cookie("email", "123@gmail.com");
    response.send("cookie setting");});
COOKIE的读取
  app.get("/get-cookie", (request, response) => {
    console.log('request.cookies);
    response.send("cookie clearing");});
COOKIE的清除
  app.get("/clear-cookie", (request, response) => {
    response.clearCookie("name");
    response.send("cookie clearing");});

COOKIE 的不足
  储存限制
    每个浏览器对 COOKIE 的数量和大小都有不同的限制, 这样就导致我们不能在 COOKIE 中保存过多的信息. 一般数量不超过50, 大小不超过4ks
  容量限制
    COOKIE 是由服务器发送给浏览器, 再由浏览器将 COOKIE 发回, 如果 COOKIE 较大会导致发送速度非常慢, 降低用户体验
  安全性也比较差






Session
是什么?  (和 COOKIE 类似)
  Session 是一个对象, 储存特定用户会话所需的属性以及配置信息. 
  Session 是保存再服务器端的数据. (保存介质, 文件,数据库,内存)  
运作流程
  我门可以在服务器中为每一次对话创建一个对象, 然后每个对象都设置一个唯一的 id, 并将该 id 以 COOKIE 的形式发送给浏览器, 然后会话中产生的数据统一保存到这
  服务器通过响应头里面的 "set-cookie: id = xxx" 返回给浏览器
  浏览器将传送过来的 id 保存在 cookie池子 中
  浏览器在下次发送请求的时候, 将 id=xxx 传送给服务器


session的操作  
  种类: 设置 / 读取 / 清除
  流程: 引入 -> 设置中间件 -> 设置 session
EG
session的设置 
  const express = require("express");  const app = express();  
  const session = require("express-session");
  app.use(
    session({
      secret: "keyboard cat",
      resave: false,
      saveUninitialized: true,}));
  app.get("/set-session", (request, response) => {
    request.session.name = "xiabai";
    request.session.email = "123@gmail.com";
    response.send("login - session set");});
session的读取
  app.get("/get-session", (request, response) => {
    console.log(`name of login user: ${request.session.name}`);
    console.log(`email of login user: ${request.session.email}`);
    response.send("self - session get");});
session的清除
  app.get("/destroy-session", (request, response) => {
    request.session.destroy(function () {
      response.send("destroy successfully!\tsafe logout!");});});




COOKIE 与 session 的区别
  COOKIE 在不太能够的浏览器之间是不共享的, 即使在同一台电脑
    chrome 无法获取 ie浏览器的 cookie
    cookie 是用户非常重要的凭据
存放位置
  COOKIE 存在于客户端
  session 存在于服务器端, 一个 session域对象 为一个用户浏览器服务
安全性
  COOKIE 以明文的方式存放于客户端, 安全性较低, 可以通过一个加密算法进行加密后存放
  seesion 存放于服务器中, 所以安全性较好 -> 存在被截获的可能  解决方案 :https证书 (加密)
网络传输量
  COOKIE 会传递消息给服务器
  session 本身存放于服务器中, 但是通过 cookie 传递id, 会有少量的传送流量
大小:
  COOKIE 保存的数据不能超过 4k, 很多浏览器都限制一个站点最多保存50个 cookie
  sesseion 保存数据理论上没有限制
