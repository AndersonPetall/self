Express
  1.0 Express介绍
  2.0 路由(Route)
  3.0 中间件
  4.0 Router路由器


1.0  Express介绍
Express时一个基于Node.js 平台的极简,灵活的web 应用开发框架,用于创建各种 Web 和移动设备应用 ==>  封装的 npm 包
简单的来讲 Express 就是运行在 node 中的用来搭建服务器的模块
1.1.1  下载 npm i express --save
1.1.2  第一个服务器
  引入express  
    const repress = require('express');
  创建应用对象
    const app = express();
  路由的设置
    app.get('/',(request, response)=>{response.end('Hello Express');});
  监听端口
    app.listen(80, ()=>{consoel.log('服务已经启动, 端口80监听中');});
  
2.0  路由(Route)
2.1 Route是什么
Route(路由) 是指如何定义应用的端点 (URLs) 以及如何响应客户端的请求
Route(路由) 由一个 URL, HTTP 请求(GET,POST等) 和若干个句柄组成的
理解: 将信息由源传递到目的地的角色称之为 route(路由)
  在node.js 脚本服务中, Route负责将用户的请求 交给 指定的回调去处理 ==>  用户请求发过来之后, 由Route进行分配, 交给指定的函数去执行
2.2 Route的定义
  三个部分
    部分1.0 HTTP请求的方法(GET或者POST)
    部分2.0 URL 路径
    部分3.0 回调函数
2.3 Route的实例与运行
EG 
创建路由规则 GET方法
 当浏览器向服务器发送http请求的时候, 若方法为 GET, URL路径为 /, 则回调函数为 当前的 (request,response)的回调函数
  app.get("/", (request, response) => {
    response.end("Hello Express-express route - self try01"); });
 当浏览器向服务器发送http请求的时候, 若方法为 GET, URL路径为 /admin, 则回调函数为 当前的 (request,response)的回调函数
  app.get("/admin", (request, response) => {
    response.send("Hello Express-backend后台 - self try01"); });
创建路由规则 POST方法
  form.html 文件中 <form action='/login' method='post'></form>
 读取form.html 文件内容, 将 file协议 转换为 HTTP协议 (若不转换, 则地址为 ./login 而不是 127.0.0.1/login
  app.get("/login", (request, response) => {
    const body = fs.readFileSync("./form.html");
    response.end(body);});
 当浏览器向服务器发送http请求的时候, 若方法为 post, URL路径为 /login, 则回调函数为 当前的 (request,response)的回调函数
  app.post("/login", (request, response) => {
    response.send("Hello Express-登录 - self try01");});
创建路由规则 ALL方法  ==>  无论是什么方式发送请求(GET, POST...), 都能够进行正常的响应
  form.html 文件中 <form action='/test' method='post'></form>
 可通过 /test直接访问(GET), 也可通过login跳转访问(POST)
  app.all("/test", (request, response) => {
    response.send("测试!!!");});
    
2.4 Request对象
Request对象是什么? 
  Request对象是 Route 回调函数中的第一个参数, 代表了用户发送给服务器的请求信息
  通过Request 对象可以读取用户发送的请求, 包括 URL地址中查询字符串的参数, 和POST 请求的请求体中的参数
Request对象的属性和方法
  request.query     获取get 请求查询字符串的参数, 拿到的是一个对象
  request.params    获取get 请求参数Route(路由)的参数, 拿到的是一个对象
  request.body      获取post 请求体, 拿到的是一个对象(要借助一个中间件)
  request.get(xxxx) 获取请求头中指定key 对应的 value   ==>  request.headers.key  = request.get('key')  获取请求头key的value信息
EG:  params的值
app.get("/news/:id.html", (request, response) => {
  let id = request.params.id;
  response.send(`id 为 ${id} 的新闻 `);});
PS 本地的IP地址　host文件
loca:  C:\Windows\System32\drivers\etc
将域名 qq.com  ==host==>  获取IP为 127.0.0.1


2.5 Response对象
Response对象是什么? 
  Response对象是 Route 回调函数中的第二个参数, 代表了服务器发送给用户的响应信息
  通过Response 对象可以设置响应报文中的各个内容,包括响应头和响应体
Response对象的属性和方法
  Response.send()               给浏览器做出一个响应(自动追加响应头)
  Response.end()                给浏览器做出一个响应(不会自动追加响应头)
  Response.download()           告诉浏览器下载一个文件(可以为相对路径)
  Response.sendFile()           给浏览器发送一个文件  绝对路径 / __dirname + '相对路径'
  Response.redirect()           重新定向到一个新的地址(URL)  ()内为URL
  Response.set(header,value)    自定义响应头内容
  res.status(code)              设置响应状态码
PS  write之后不能是send, 应为end
response.send 里面存在响应字符集设置, 相当于里面设置了响应头
在 响应体设置之后, 不能设置响应头
EG  设置响应
app.get("/res", (request, response) => {
  //响应状态码
  response.stateCode = 404;
  //响应状态字符串
  response.statusMessage = "test";
  //响应头
  response.setHeader("Week", "San");
  response.setHeader("Content-type", "text/html;charset=UTF-8");
  //响应体
  response.write("Hello - what fuck\n");
  //设置响应
  //response.send("段及那重铸之日, 起始归来之时");  //不能设置send
  response.end("响应end结束");});
EG  download
app.get("/res", (request, response) => {//下载响应
  response.download("./package.json");});



网站根目录介绍  express.static
网站根目录放置不经常变动的内容(静态资源:长时间不发生改变的资源)
  html,css,js,图片,视频,音频 ...
对于内容要频繁变动的资源, 设置 Route(路由)规则响应页面内容
EG: 网址的对应响应, 根目录 vs Route 规则
  app.use(express.static(__driname + '/public'));  //将当前目录下的public文件作为根目录
  //若根目录存在,则响应根目录内容, 若根目录不存在对应文件,则响应Route (路由)内容
  app.get("/home.html", (request, response) => {   
    response.send("<h1>what fuck--home</h1>");});
  app.get("/index.html", (request, response) => {
    response.send("<h1>what fuck--index</h1>");});
  
  
  
  
3.0  middleware 中间件
middleware 就是函数, 在特定的场景下执行==>(一个中间函数,在得到一个请求对象之后,要么返回给客户端,要么传递给另一个中间函数)
种类
  全局middleware: 每个http请求在到达服务端后, 都会执行的中间件的代码
  路由middleware: 只在某些http请求中执行, 并不是在所有请求中执行
使用步骤
  1.0 安装
  2.0 代码中引入 middleware
  3.0 app.use 或者在 Route(路由)中进行指定设置
  4.0 可选(在回调的函数中使用指定语法操作)

EG:  全局middleware
  目的: 利用middle 记录 各个url 以及对应的时间
  const date = New Date(); const fs = require('fs');
  //声明一个中间件函数
  let record = function (request, response, next) {//next 是一个函数类型值
    const time =date.getFullYear() + ":" + date.getMonth() + ":" + date.getDate();   //获取时间
    let path = request.url;  //获取路径
    fs.writeFileSync("./access.log", `[${time}]\t ${path}\r\n`, { flag: "a" });    //写入文件 当前目录下的 access.log 文件
    next();    //调用next函数
  };
  //使用中间件 (全局middleware)
  app.use(record);
  //不同的 Route 规则
  app.get("/index", (request, response) => {response.send(`what index`);});
  app.get("/home", (request, response) => {response.send(`what home`);});
  app.get("/a", (request, response) => {response.send(`what a`);});
EG:  路由middleware
  目的: 检查 admin是否为1, 若 http://127.0.0.1/index?admin=1,则send,否则跳转到http://127.0.0.1/login
  普通写法:  每个路由规则都要书写 
  app.get("/index", checkUser, (request, response) => {
    let isAdmin = request.query.admin;
    isAdmin === "1" ? response.send("后台首页") : response.redirect("/login")});
  middleware写法: 在每个路由规则下添加 路由middleware 函数
  let chechUser = function(request, response, next){
    let isAdmin = request.query.admin;
    isAdmin === "1" ? next() : response.redirect("/login");};
  app.get("/index", chechUser, (request, response) => {response.send(`what index`);});
  app.get("/home", chechUser, (request, response) => {response.send(`what home`);});
  
常用middleware介绍  静态资源服务中间件 & 请求体参数的获取中间件
EG: 静态资源服务中间件  ==>  将当前目录下的 public 文件夹作为根目录
  app.use(express.static('./public')); / app.use(express.static(__dirname + '/public'));
EG: 请求体参数获取的中间件   接受输入的账号和密码
  node: npm install body-parser
  var bodyParser = require('body-parser'); const express = require('express'); const app = express();
  //函数   处理请求体
  app.use(bodyParser.urlencoded({ extended: false }));
  app.get('/form',(request, response)=>{ response.sendFile(__dirname + '/form.html');});
  app.post('login',(request, response)=>{ //获取请求体
    console.log(request.body);
    ressponse.send('请求体接受完毕');});
  //对于 处理请求体的函数的  简易的复写
  let myBodyParse = function(request, response, next){
  let body = ''; //获取求求体
  request.on('data',chunk=>{body +=chunk;}); //拼接
  request.on('end',()=>{
    const data = qs.parse(body); //解析
    response.body = data;  //将请求体对象作为属性储存到 response 对象中
    next(); }
  
  
  
  
  
  
4.0  Router 路由器  ==> 将Route 分开写
Router是什么? Router是一个完整的中间件和路由系统, 也可以看作是一个小型的app对象
为什么使用Router? 为了更好的分类管理 Route(路由)
步骤
  1 创建一个 routers 文件夹
  2 创建单独的文件 router.js
  3 修改 router.js 的代码(四个步骤)
    引入 express 以及 Router
    Route(路由) 的书写
    暴露 router(路由器)
  4 引入 router.js
  5 app.use设置中间件
EG:
主文件中
  const express = require("express");
  const app = express();
  const router1 = require("./router/routerA.js"); app.use(router1);
  const router2 = require("./router/routerB.js"); app.use(router2);
  app.listen("80", () => {console.log("Server is running... port 80 is listening");});
routerA.js文件
  const express = require("express"); const router = express.Router();
  router.get("/homt", (request, response) => {response.send("home web");});
  router.get("/videos", (request, response) => {response.send("videos web");});
  module.exports = router;
