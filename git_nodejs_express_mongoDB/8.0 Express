Express
  1.0 Express介绍
  2.0 路由(Route)
  3.0 中间件
  4.0 Router路由器


1.0  Express介绍
Express时一个基于Node.js 平台的极简,灵活的web 应用开发框架,用于创建各种 Web 和移动设备应用 ==>  封装的 npm 包
简单的来讲 Express 就是运行在 node 中的用来搭建服务器的模块
1.1.1  下载 npm i express --save
1.1.2  第一个服务器
  引入express  
    const repress = require('express');
  创建应用对象
    const app = express();
  路由的设置
    app.get('/',(request, response)=>{response.end('Hello Express');});
  监听端口
    app.listen(80, ()=>{consoel.log('服务已经启动, 端口80监听中');});
  
2.0  路由(Route)
2.1 Route是什么
Route(路由) 是指如何定义应用的端点 (URLs) 以及如何响应客户端的请求
Route(路由) 由一个 URL, HTTP 请求(GET,POST等) 和若干个句柄组成的
理解: 将信息由源传递到目的地的角色称之为 route(路由)
  在node.js 脚本服务中, Route负责将用户的请求 交给 指定的回调去处理 ==>  用户请求发过来之后, 由Route进行分配, 交给指定的函数去执行
2.2 Route的定义
  三个部分
    部分1.0 HTTP请求的方法(GET或者POST)
    部分2.0 URL 路径
    部分3.0 回调函数
2.3 Route的实例与运行
EG 
创建路由规则 GET方法
 当浏览器向服务器发送http请求的时候, 若方法为 GET, URL路径为 /, 则回调函数为 当前的 (request,response)的回调函数
  app.get("/", (request, response) => {
    response.end("Hello Express-express route - self try01"); });
 当浏览器向服务器发送http请求的时候, 若方法为 GET, URL路径为 /admin, 则回调函数为 当前的 (request,response)的回调函数
  app.get("/admin", (request, response) => {
    response.send("Hello Express-backend后台 - self try01"); });
创建路由规则 POST方法
  form.html 文件中 <form action='/login' method='post'></form>
 读取form.html 文件内容, 将 file协议 转换为 HTTP协议 (若不转换, 则地址为 ./login 而不是 127.0.0.1/login
  app.get("/login", (request, response) => {
    const body = fs.readFileSync("./form.html");
    response.end(body);});
 当浏览器向服务器发送http请求的时候, 若方法为 post, URL路径为 /login, 则回调函数为 当前的 (request,response)的回调函数
  app.post("/login", (request, response) => {
    response.send("Hello Express-登录 - self try01");});
创建路由规则 ALL方法  ==>  无论是什么方式发送请求(GET, POST...), 都能够进行正常的响应
  form.html 文件中 <form action='/test' method='post'></form>
 可通过 /test直接访问(GET), 也可通过login跳转访问(POST)
  app.all("/test", (request, response) => {
    response.send("测试!!!");});
    
2.4 Request对象
Request对象是什么? 
  Request对象是 Route 回调函数中的第一个参数, 代表了用户发送给服务器的请求信息
  通过Request 对象可以读取用户发送的请求, 包括 URL地址中查询字符串的参数, 和POST 请求的请求体中的参数
Request对象的属性和方法
  request.query     获取get 请求查询字符串的参数, 拿到的是一个对象
  request.params    获取get 请求参数Route(路由)的参数, 拿到的是一个对象
  request.body      获取post 请求体, 拿到的是一个对象(要借助一个中间件)
  request.get(xxxx) 获取请求头中指定key 对应的 value   ==>  request.headers.key  = request.get('key')  获取请求头key的value信息
EG:  params的值
app.get("/news/:id.html", (request, response) => {
  let id = request.params.id;
  response.send(`id 为 ${id} 的新闻 `);});
PS 本地的IP地址　host文件
loca:  C:\Windows\System32\drivers\etc
将域名 qq.com  ==host==>  获取IP为 127.0.0.1


2.5 Response对象
Response对象是什么? 
  Response对象是 Route 回调函数中的第二个参数, 代表了服务器发送给用户的响应信息
  通过Response 对象可以设置响应报文中的各个内容,包括响应头和响应体
  
