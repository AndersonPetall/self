起始配置
git config --global user.name "Your name"
git config --global user.email "123@gmail.com"
查看配置信息
git config -l


基本操作
1.0 创建并且进入空文件夹
2.0 右键->点击Git Bash Here启动命令行
3.0 git init仓库初始化
4.0 创建一个初始化文件index.html
5.0 git add index.html将文件加入到暂存区
6.0 git commit -m '注释'  提交到仓库,m代表message

git log 查看历史版本
git status 查看当前目录所有文件状态

初始化 ==>  编辑  ==>  加入暂存区  ==>  提交
编辑
  vim 
  Hbuilder
  资源管理操作
加入暂存区
  git add 文件名  (实际上是添加修改)
  git add A
提交
  git commit -m '文本注释'
  git commit(出现vim编辑窗口,输入注释,保存退出)




.git目录
  hook目录包含客户端或服务端的钩子脚本,在特定操作下自动执行
  info信息文件夹,包含一个全局性排除文件,可以配置文件忽略
  logs保存日志信息
  objects 目录储存所有数据内容, 本地的版本库存放位置
  refs目录储存指向数据的提交对象的指针(分支)
  config文件包含项目特有的配置选项
  description用来显示对仓库的描述信息
  HEAD文件指示目前被检出的分支
  index暂存区文件,是一个二进制文件(git ls-files)
切记: 不要手动去修改.git文件夹中的内容



版本库的三个区域
  工作区(代码编辑区)  ==> .git所在的项目文件夹(当前文件夹的所有文件)
  暂存区(修改待提交区)  ==>  .git中的index文件
  仓库区(代码保存区)  ==>  .git中的objects文件夹
创建文件xxx==> 工作区 == git add xxx==> 暂存区  ==git commit==>  仓库区
  
git的常用命令
  git log  查看历史版本
  git ls-files  查看暂存区的文件内容
  git status  版本状态查看(查看当前目录所有文件状态)
  git add -A  添加所有新文件到暂存区
  git commit -m '注释'  提交修改并且注释
  dit diff  查看工作区与暂存区的差异(不显示新增文件) 显示做了哪些修改
  dig diff --cached  查看暂存区与仓库的差异

git statues 版本状态
  红色修改, 表明修改只存在于 工作区    前推 git add
  绿色修改, 表明修改只存在于 工作区&暂存区    前推 git commit -m
  
  
  
历史版本回滚
  查看 (方向上下键)
    git log
    git log --oneline
    git reset --hard  版本号
  查看所有操作记录  git reflog
  
  
  
配置忽略的文件
1.0 仓库中未提交的文件
说明: 项目中有些文件不应该储存到版本库中. Git中需要创建一个我呢见 [gitignore]配置忽略, 一般与 .git目录同级(也可在子文件夹下)
常见的情况:
  临时文件
  多媒体文件, 如音频,视频
  编辑器生成的配置文件(.idea)
  npm安装的第三方模块
#忽略所有的 .idea文件  .idea
#忽略所有的 .test结尾文件  .test
#忽略node_modules文件和文件夹  /node_modules
2.0 仓库中已经提交的文件
三个步骤:
  步骤1: 对于已经加入到版本库的文件,可以在版本库中删除该文件
    git rm --cached .idea
  步骤2: 然后在 .gitignore 中配置忽略
    .idea
  步骤3: add 和 commit 提交






Git的分支
说明: 分支是Git重要的功能特性之一,开发人员可以在主开发线路的基础上分离出新的开发线. branch
在分支A上创建B分支, 若分支A有文件a, 分支B有文件b, 则分支A可以看见文件a, 分支B可以看见文件a和b(可能产生冲突)

基本操作
  创建分支  git branch name
  查看分支  git branch
  切换分支  git checkout name
  合并分支  git merge name    PS:将A分支合并到B分支上,则必须在B分支上操作, A分支被合并了也依然存在
  删除分支  git branch -d name 
  创建并切换分支  git checkout -b name  
  查看branch命令 git branch -h
PS:每次切换分支钱 提交一下当前的分支, 防止工作区内容对目标分支出现干扰(不提交则工作区文件将出现在切换后的分支)


冲突
说明: 当多个分支修改同一个文件之后,合并分支的时候就会产生冲突. 
冲突的解决非常的简单: 将内容修改为最终想要的结果, 然后执行git add 与git commit 就可以了
查看方式:
  提示automatic merge fail
  MERGINNG 出现, 则意味着冲突
  git status 查看
