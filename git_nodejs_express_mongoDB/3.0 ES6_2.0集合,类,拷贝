Set集合
  size  返回集合元素个数
  add  新增一个新元素, 返回当前集合
  delete  删除元素, 返回boolean值
  has  检测集合是否包含某个元素, 返回 boolean值
  clear  清空集合, 返回undefined
  可用for...of 遍历
声明和创建
  const set1 = new Set({1,3,5,7]);
  
...拓展运算符 自动筛掉重复的值, 并且不会发生类型转换
实例1.0 数组去重
  const a1 = ['A', 'B', 'C', 'C', 'A']
  connst s = new Set(a1);
  const result = [...s];  //A B C
实例2.0 求交集
  const a1 = [1,2,3,4,5,6,7];
  const a2 = [4,5,6,7,8,9];
  const result = [...new Set(a1)].filter(item => {
    return (new Set(a2)).had(item); });
实例3.0 求并集
  const  result = [...new Set([...new Set(a1), ...new Set(a2)])];
实例4.0 求差集
  const result = [...new Set(a1)].filter(item => {
    return !(new Set(a2)).had(item); });




Map结构  键值对
  size  返回Map元素个数
  set  新增一个新元素, 返回当前Map
  get  返回键值对的键值
  delete  删除某个键
  clear  清空集合, 返回undefined
  可用for...of 遍历
声明和创建
  const m1 = new Map();
  m1.set('mei', '小橙子');
  let key = {};  m1.set(key, 'auguigu');
  
  
  
class类
原方法:
  //创建对象的方式 new Object{} 工厂函数 构造函数 Object.create
  function Phone(brand, price){ this.brand = brand; this.price = price;}
  //添加方法
  Phone.prototype.call = function(someone) { console.log(`我可以给$(someone)大电话`);}
  //实例化对象
  const nokia = new Phone('诺基亚', 233);
class方法:
  class Phone {
    //构造   不是必须的,但是只能有一个
    constructor(brand, price){this.brand = brand; this.price = price;}
    //方法
    call(someone){ console.log(`我可以给$(someone)大电话`);}
    //静态成员与方法   被类直接调用,而不是类的实例
    static name = '手机'
    static change(){console.log('123');}
  }
  
类的继承
原方法:
    function Phone(brand, price){ this.brand = brand; this.price = price;}
    function SmartPhone(brand, price, storage, pixel){ 
      //调用父类的函数  属性的初始化
      Phone.call(this, brand, price);
      this.storage = storage; this.pixel = pixel;}
class方法:
  class Phone{
    constructor(brand, price){this.brand = brand; this.price = price;} }
  class SmartPhone extends Phone{
    constructor(brand, price, storage, pixel){
      super(brand, price);
      this.storage = storage; this.pixel = pixel;} }

class类中的get和set 方法
  class Phone{
    get price(){ return 200;}
    set price(v){this.jiage = v;}
    static get size( return 1.1;}
    static set size(v) {this.chicun = v;}
  }






数值扩展
  1.0  二进制和八进制
    let n = 0b111; 四进制
    let n = 0o111; 八进制
    let n = 0x111; 十六进制
  2.0  Number.isFinite  检测一个数值是否为有限数
    console.log(Number.isFinite(Math.PI));  //true
  3.0  Number.isNan  检测一个属值是否为NaN  
    //全局函数  isNan(num)
    console.log(Number.isNan(NaN)); //true
  4.0  Number.parseInt  字符串转整数
    console.log(Number.parseInt('5252love'));  //5252
    console.log(Number('5252love'));  //NaN
  5.0  Math.trunc  将数字的小数部分抹掉
    console.log(Math.trunc(3.131415));  //3
  6.0  Number.isInteger  判断一个数是否为整数
    console.log(Number.isInteger(3.131415));  //false
  7.0  幂运算  Math.pow()
    console.log(Math.pow(2 ** 10));  //1024




对象的拓展
  1.0  判断两个值是否完全相等  ===  Object.is
    let n1 = 100, n2 = 300;
    console.log(Object.is(n1, n2));  //false
    console.log(NaN === NaN);  //false
    console.log(Object.is(NaN, NaN));  //true
  2.0  Object.assign  对象的合并
    const A = {name: "akl"}; const B = {pos:['toronto', 'on']}
    Object.assign(A, B); //将 B 的属性加到 A 身上
    const res = Object,assign(A, B, C);
  3.0  直接修改 __proto__ 设置原型
    const A = {name: "father"}; const B = {test:'test'}
    B.__prote = A;
    //B 中包含 A的属性




浅拷贝和深拷贝  ==>  引用数据类型
浅拷贝:复制的结果如果发生变化对原数据造成了影响,就称之为浅拷贝
深拷贝:复制的结果如果发生变化对原数据不能造成任何影响,就称之为深拷贝

浅拷贝:
数组EG1  
  lat arr1 = [1,2,3]; const arr2 = arr;
  arr2[0] = 9;   //arr1[0] 也变为9
数组EG2 
  lat arr1 = [{name:'pig'},2,3]; const arr2 = [].concat(arr1);    //concat  将原数组的数据进行一一复制
  arr2[0].name = 'tiger'  //arr1[0] 'tiger'
数组EG3  let arr2 = arr.slice(0)
数组EG4  let arr2 = [...arr1]
对象EG1  const school = {};  const newSchool = Object.assign({}, school};

深拷贝:   
  const school = {
    name: 'UNNC',
    pos: ['ningbo','zhejiang','China'],
    founder: {name: 'princess'}
    change:function(){console.log('改变');}}
方法1: JSON实现深拷贝  (缺陷:不能复制方法)
stringfy 将 JS 对象转化为 JSON 格式的字符串;  parse 将 JSON 格式的字符串转换为 JS 对象
  let str = JSON.stringfy(school);
  let newschool = JSON.parse(str);
方法2: 递归深拷贝 -原理
  const school = {};
  newschool.name = school.name;
  newschool.pos = []; newschool.pos[0] = school.pos[0]......
  newschool.founder = {}; newschool.founder.name = school.founder.name
  //方法
  newschool.change = school.change.bind(newschool);
方法2: 递归深拷贝 -实现(封装函数)
  function deepClone(data){
    let type = getDataType(data)
    if(type === 'Object')  let container = {};
    if(type === 'Array')  let container = [];
    for(let i in data){
      let type1 = getDataType(data[i]);
      if(type1 === 'Array' || type1 === 'Object') containers[i] = deepClone(data[i]);
      else container[i] = data[i];
    }
    return container;
  }
  //封装一个函数  用来获取数据类型  Object / Array
  function getDataType(data){
    return Object.prototype.toString.call(data).slice(8,-1);
  }
