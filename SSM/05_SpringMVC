SpringMVC简介

入门案例
  1.0 使用SpringMVC技术需要先导入SpringMVC坐标与Servlet坐标
    <dependencies>
        <!--导入坐标springmvc/servlet-->
        <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>3.1.0</version>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-webmvc</artifactId>
          <version>6.0.6</version>
        </dependency>
    </dependencies>
  2.0 床卷SpringMVC控制类(等同于Servlet功能)  controller下UserController.java
    @Controller
    public class UserController {
        @RequestMapping("/save")
        @ResponseBody
        public String save(){
            System.out.println("user save ... ");
            return "{'module':'SpringMVC'}";
        }
    }
  3.0 初始化SpringMVC环境(同Spring环境), 设定SpringMVC加载对应的bean  config下SpringMvcConfig.java
    @Configuration
    @ComponentScan("example.controller")
    public class SpringMvcConfig {}
  4.0 初始化Servlet容器, 加载SpringMVC环境, 并设置SpringMVC技术处理的请求  config下ServletContainersInitConfig.java
    public class ServletContainersInitConfig  extends AbstractDispatcherServletInitializer {
        protected WebApplicationContext createServletApplicationContext() {   //加载SpringMVC容器配置
            AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext();
            ctx.register((SpringMvcConfig.class));
            return ctx;
        }
        protected String[] getServletMappings() {   //设置那些请求归属SpringMVC处理
            return new String[]{"/"};
        }
        protected WebApplicationContext createRootApplicationContext() {   //加载Spring容器配置
            return null;
        }
    }


名称: @RequestMapping
类型: 方法注解
位置: SpringMVC控制器方法定义上方
范例:  
  @RequestMapping("/save")
  public void save(){System.out.println("user save ... ");}
相关属性: value(默认):请求访问路径

