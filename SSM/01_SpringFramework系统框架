系统框架
  Data Access/Integration  (Data Access:数据访问, Data Integration:数据集成)
    JDBC / ORM / OXM / JMS / Transactions
  Web  (Web开发)
    WebSocket / Servlet / Web / Portlet
  AOP + Aspects  (AOP:面向切面编程, Aspects:AOP思想实现)
  Core Container  (核心容器)
    Beans / Core / Context SpEL
  Test (Test:单元测试与集成测试)
  
第一部分: 核心容器
  核心概念(IoC/DI)   Inversion of Control控制反转/Dependecy Injection依赖注入
  容器基本操作
第二部分: 整合
  整合数据层技术MyBatis
第三部分: AOP
  核心概念
  AOP基础操作
  AOP实用开发
第四部分: 事务
  事务实用开发




Coupling耦合
Cohesion内聚
核心概念
  代码书写现状: 耦合度偏高
  解决方法: 使用对象的时候,在程序中不要主动使用new产生对象,转换为由外部提供对象
  *IoC(Inversion of Control) 控制反转 : 对象的创建控制权转移到外部,这种思想称为控制反转    -->    目的:解耦
  *Spring实现方法
    Spring提供了一个容器,称为IoC容器,用来充当IoC思想中的'外部'
    IoC容器负责对象的创建,初始化等一系列工作,被创建的对象在IoC容器中统称为Bean
  *DI(Dependency Injection)依赖注入
    在容器中简历bean与bean之间的依赖关系的整个过程,成为依赖注入
  ==>目标: 充分解耦
    使用IoC容器管理bean(IoC)
    在IoC容器内将有依赖关系的bean进行关系绑定(DI)
    
