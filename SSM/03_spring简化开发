spring注解开发
  注解开发定义bean
  纯注解开发

注解开发定义bean
  使用@Component定义bean
    @Component("bookDao")
    public class BookDaoImpl implements BookDao {
    }
  核心配置文件中通过组件扫描加载bean
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:context="http://www.springframework.org/schema/context"
           xsi:schemaLocation="
                http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context.xsd
                ">
        <context:component-scan base-package="org.example"/>
    </beans>
  
  Spring提供@Component注解的三个衍生注解
    @Controller:  用于表现层bean定义
    @Service:     用于业务层bean定义
    @Repository:  用于数据层bean定义
  
纯注解开发
  配置  config下SpringConfig文件
  @Configuration
  @ComponentScan({"org.example.dao","org.example.service"})
    public class SpringConfig {}
  运行
    public class AppForAnnotation {
    public static void main(String[] args){
        ApplicationContext ctx = new AnnotationConfigApplicationContext(SpringConfig.class);
        BookDao bd = (BookDao) ctx.getBean("bookDao");
        bd.save();}
    }



注解开发bean作用范围与生命周期管理
  bean作用范围
    @Scope("singleton")
    @Scope("prototype")  //prototype下ctx.clost()不起作用
  bean生命周期
    @PostConstruct
    @PreDestroy

代码
  @Repository("bookDao")
  //@Scope("prototype")
  public class BookDaoImpl implements BookDao {
      public void save(){System.out.println("book dao impl out ... ");}
      @PostConstruct
      public void init(){System.out.println("bookdao imple init ... ");}
      @PreDestroy
      public void destroy(){System.out.println("bookdao imple destroy ... ");}
  }
运行
  public class Main {
      public static void main(String[] args) {
          AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(SpringConfig.class);
          BookDao bd1 = (BookDao) ctx.getBean("bookDao");
          BookDao bd2 = (BookDao) ctx.getBean("bookDao");
          System.out.println(bd1);
          System.out.println(bd2);
          ctx.close();  //prototype下无法关闭
      }
  }




注解开发依赖注入
  使用@Autowired注解开启自动转杯模式(按类型)
    注意: 自动装配基于反射设计创建按对象并且暴力反射对应属性未私有属性初始化数据,因此无需提供setter方法
    注意: 自动装配建议使用无参构造方法创建对象(默认),如果不提供对应构造方法,请提供唯一的构造方法
  使用@Qualifier注解开启指定名称装配bean
    注意: @Qualifier注解无法单独使用,必须配合@Autowired注解使用
  使用@Value实现简单类型注入
  使用@PropertiesSource注解加载properties文件
    注意: 路劲仅支持单一文件配置,多文件请使用数组格式配置,不允许使用通配符*
    
@Configuration
@ComponentScan({"org.example"})
@PropertySource({"jdbc.properties"})
public class SpringConfig {}

@Repository("bookDao2")
public class BookDaoImpl implements BookDao {
    @Value("${name}")    //存放于jdbc.properties中
    private String name;
    public void save(){
        System.out.println("book dao impl out  ... 222   " + name);}    
}
@Repository("bookDao")
public class BookDaoImpl1 implements BookDao {
    public void save(){System.out.println("book dao impl out  ...  ");}}


@Service
public class BookServiceImpl implements BookService {
    @Autowired
    @Qualifier("bookDao2")
    private BookDao bookDao;
    public void save(){
        System.out.println("book service impl out  .... ");
        bookDao.save();}}






第三方bean的管理
    //1.0 定义一个方法获取一个管理的对象
    //2.0 添加@Bean  表示当前方法的返回值是一个bean

config下JdbcConfig文件
  public class JdbcConfig {
    @Bean
    public DataSource dataSource(){
        DruidDataSource ds = new DruidDataSource();
        ds.setDriverClassName("com.mysql.jdbc.Driver");
        ds.setUrl("jdbc:mysql:local:3306/spring_db");
        ds.setUsername("root");
        ds.setPassword("root");
        return ds;
    }
  }
config下SpringConfig文件
  @Configuration
  //@ComponentScan({"org.example.config"})   扫描式
  @Import({JdbcConfig.class})   引入式
  public class SpringConfig {}
  

第三方bean的依赖注入
  简单类型的依赖注入
    利用@Value注释进行简单类型依赖注入
    public class JdbcConfig {   //成员变量
    @Value("com.mysql.jdbc.Driver")
    private String driver;
    @Value("jdbc:mysql:local:3306/spring_db")
    private String url;
    @Value("root")
    private String userName;
    @Value("root")
    private String password;
    @Bean
    public DataSource dataSource(){
        DruidDataSource ds = new DruidDataSource();
        ds.setDriverClassName(driver);
        ds.setUrl(url);
        ds.setUsername(userName);
        ds.setPassword(password);
        return ds;}}

  引用类型依赖注入
    引用类型注入只需要为bean定义方法设置形参即可,容器会根据类型自动装配对象
    @Repository
    public class BookDaoImpl implements BookDao {
        public void save(){System.out.println("book dao impl out ...");}
    }

    public class JdbcConfig {
    @Bean
    public DataSource dataSource(BookDao bookdao){  //方法形参
        System.out.println(bookDao);
        DruidDataSource ds = new DruidDataSource();
        ds.setDriverClassName(driver);
        ds.setUrl(url);
        ds.setUsername(userName);
        ds.setPassword(password);
        return ds;}}


注解开发总结
  XML配置对比注解配置
    功能: 定义bean                           
      XML配置:  bean标签(id属性,class属性)
      注解:     @Component(@Controller/@Service/@Repository)  @ComponentScan
    功能: 设置依赖注入                          
      XML配置:  setter注入/set方法(引用类型/简单类型)    构造器注入/构造器方法(引用类型/简单类型)     自动装配
      注解:     @Autowired(@Qualifier)   @Value
    功能: 配置第三方bean                         
      XML配置:  静态工厂,实力工厂,FactoryBean
      注解:     @Bean
    功能: 作用范围                   
      XML配置:  scope属性
      注解:     @Scope
    功能: 生命周期              
      XML配置:  标准接口(init-method, destroy-method)
      注解:     @PostConstructor   @PreDestroy
