bean基础配置
  名称: bean
  类型: 标签
  所属: beans标签
  功能: <beans>  <bean></bean>  <bean></bean>     </beans>
  属性列表:
    id: bean的id, 使用容器可以通过id值获取对应的bean,在一个容器中id值唯一
    class: bean的类型, 即配置的bean 的全路劲类名
    name: bean的别名, 可有多个需用空格分隔
bean的作用范围
  名称: scope
  类型: 属性
  所属: bean标签
  功能: singleton单例(默认) / prototype非单例
  eg: <bean id="bookService" name="service service2" class="com.itheima.service.impl.BookServiceImpl" scope="prototype"/>
适合交给容器进行管理的bean
  表现层对象
  业务层对象
  数据层对象
  工具对象
不适合交给容器进行管理的bean
  封装实体的域对象
  
bean实例化: 构造方法, 静态工厂和实例工厂
1.0 构造方法
  //private构造函数也能够创立  (暴力映射)
  提供可访问的构造方法
    public interface BookDao {public void save();}
    public class BookDaoImpl implements BookDao{
      public BookDaoImpl(){}  //如果没有无参构造方法, 将抛出异常 BeanCreationException
      public void save(){System.out.println("book dao serve...");}
    }
  配置 <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl"/>
---------------------
2.0 静态工厂  
    public interface OrderDao {public void save();}
    public class BookDaoImpl implements BookDao{
      public BookDaoImpl(){}  //如果没有无参构造方法, 将抛出异常 BeanCreationException
      public void save(){System.out.println("book dao serve...");}
    }
    //静态工厂
    public class OrderDaoFactory {
      public OrderDaoFactory(){}
      public static OrderDao getOrderDao(){
        System.out.println("factory order dao setup...");
        return (OrderDao)new OrderDaoImpl();}
    }
    配置 <bean id="orderDao" class="com.itheima.factory.OrderDaoFactory" factory-method="getOrderDao"/>
---------------------
3.0 实例工厂
    public interface UserDao {public void save();}
    public class UserDaoImpl implements UserDao{
      public UserDaoImpl(){}
      public void save(){System.out.println("user dao save ... useDaoImpl  ");}
    }
    //实例化工厂
    public class UserDaoFactory {
      public UserDaoFactory(){}
      public UserDao getUserDao()throws Exception{
        System.out.println("factory setup.... userDaoFactory");
        return (UserDao) new UserDaoImpl();}
    }
    配置
      <bean id="userFactory" class="com.itheima.factory.UserDaoFactory"/>
      <bean id="userDao" factory-method="getUserDao" factory-bean="userFactory"/>
---------------------
4.0 FactoryBean实例化(3.0的升级版)
    public interface UserDao {public void save();}
    public class UserDaoImpl implements UserDao{
      public UserDaoImpl(){}
      public void save(){System.out.println("user dao save ... useDaoImpl  ");}
    }
    //实例化工厂
    public class UserDaoFactoryBean implements FactoryBean<UserDao>{
      public UserDao getObject() throws Exception{//代替原始实例工厂中创建对象的方法
        System.out.println("userDaoFactoryBean setup .... ");
        return (UserDao)new UserDaoImpl();}
      public Class<?> getObjectType(){//返回对象类型
        return UserDao.class;}
      public boolean isSingleton(){  //判断是否为单例模式(默认为单例模式)
        return true;}
    }
    配置: <bean id="userDao" class="com.itheima.factory.UserDaoFactoryBean"/>
    
    



Bean生命周期
  生命周期: 从创建到销毁的完整过程
  bean生命周期: bean从创建到销毁的整体过程
  bean生命周期控制: 在bean创建后到销毁前做一些事情
  
方式1.0  
  提供控制方法
    public class BookDaoImpl implements BookDao {
      public void save() {
        System.out.println("book dao save ...book_dao_impl");}
      //表示bean初始化操作
      public void init(){ System.out.println("init....");}
      //表示bean销毁前对应的操作
      public void destroy(){ System.out.println("destroy....");}
    }
  配置: <bean id="bookDao" name="dao" class="com.itheima.dao.impl.BookDaoImpl" init-method="init" destroy-method="destroy"/>
  运行:
    ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext1.xml");
    //ctx.registerShutdownHook();   //java虚拟机关闭前关闭
    BookDao bookDao = (BookDao) ctx.getBean("bookDao");
    bookDao.save();
    ctx.close(); //暴力关闭
方式2.0 
  实现InitializingBean, DisposableBean接口
    public class BookServiceImpl implements BookService , InitializingBean, DisposableBean {
      private BookDao bookDao;
      public void save() {
        System.out.println("book service save ...bookService_impl");
        bookDao.save();}
    public void setBookDao(BookDao bookDao) {System.out.println("properties setting....");this.bookDao = bookDao;} //运行在afterPropertiesSet()之前
    //非单例模式不执行
    public void destroy() throws Exception{
        System.out.println("service destroy....");}
    public void afterPropertiesSet() throws Exception{System.out.println("service init....");}
    }
  配置: <bean id="bookService" name="service service2 bookEbi" class="com.itheima.service.impl.BookServiceImpl"> <property name="bookDao" ref="dao"/> </bean>
