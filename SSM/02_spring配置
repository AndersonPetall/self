bean基础配置
  名称: bean
  类型: 标签
  所属: beans标签
  功能: <beans>  <bean></bean>  <bean></bean>     </beans>
  属性列表:
    id: bean的id, 使用容器可以通过id值获取对应的bean,在一个容器中id值唯一
    class: bean的类型, 即配置的bean 的全路劲类名
    name: bean的别名, 可有多个需用空格分隔
bean的作用范围
  名称: scope
  类型: 属性
  所属: bean标签
  功能: singleton单例(默认) / prototype非单例
  eg: <bean id="bookService" name="service service2" class="com.itheima.service.impl.BookServiceImpl" scope="prototype"/>
适合交给容器进行管理的bean
  表现层对象
  业务层对象
  数据层对象
  工具对象
不适合交给容器进行管理的bean
  封装实体的域对象
  
bean实例化: 构造方法, 静态工厂和实例工厂
1.0 构造方法
  //private构造函数也能够创立  (暴力映射)
  提供可访问的构造方法
    public interface BookDao {public void save();}
    public class BookDaoImpl implements BookDao{
      public BookDaoImpl(){}  //如果没有无参构造方法, 将抛出异常 BeanCreationException
      public void save(){System.out.println("book dao serve...");}
    }
  配置 <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl"/>
---------------------
2.0 静态工厂  
    public interface OrderDao {public void save();}
    public class BookDaoImpl implements BookDao{
      public BookDaoImpl(){}  //如果没有无参构造方法, 将抛出异常 BeanCreationException
      public void save(){System.out.println("book dao serve...");}
    }
    //静态工厂
    public class OrderDaoFactory {
      public OrderDaoFactory(){}
      public static OrderDao getOrderDao(){
        System.out.println("factory order dao setup...");
        return (OrderDao)new OrderDaoImpl();}
    }
    配置 <bean id="orderDao" class="com.itheima.factory.OrderDaoFactory" factory-method="getOrderDao"/>
---------------------
3.0 实例工厂
    public interface UserDao {public void save();}
    public class UserDaoImpl implements UserDao{
      public UserDaoImpl(){}
      public void save(){System.out.println("user dao save ... useDaoImpl  ");}
    }
    //实例化工厂
    public class UserDaoFactory {
      public UserDaoFactory(){}
      public UserDao getUserDao()throws Exception{
        System.out.println("factory setup.... userDaoFactory");
        return (UserDao) new UserDaoImpl();}
    }
    配置
      <bean id="userFactory" class="com.itheima.factory.UserDaoFactory"/>
      <bean id="userDao" factory-method="getUserDao" factory-bean="userFactory"/>
---------------------
4.0 FactoryBean实例化(3.0的升级版)
    public interface UserDao {public void save();}
    public class UserDaoImpl implements UserDao{
      public UserDaoImpl(){}
      public void save(){System.out.println("user dao save ... useDaoImpl  ");}
    }
    //实例化工厂
    public class UserDaoFactoryBean implements FactoryBean<UserDao>{
      public UserDao getObject() throws Exception{//代替原始实例工厂中创建对象的方法
        System.out.println("userDaoFactoryBean setup .... ");
        return (UserDao)new UserDaoImpl();}
      public Class<?> getObjectType(){//返回对象类型
        return UserDao.class;}
      public boolean isSingleton(){  //判断是否为单例模式(默认为单例模式)
        return true;}
    }
    配置: <bean id="userDao" class="com.itheima.factory.UserDaoFactoryBean"/>
    
    



Bean生命周期
  生命周期: 从创建到销毁的完整过程
  bean生命周期: bean从创建到销毁的整体过程
    初始化容器
      1. 创建对象(内存分配)
      2. 执行构造方法
      3. 执行属性注入(set操作)
      4. 执行bean初始化方法
    使用bean 执行业务操作
    关闭/销毁容器 执行bean销毁方法
  bean生命周期控制: 在bean创建后到销毁前做一些事情
  
方式1.0  pml设置方法
  提供控制方法
    public class BookDaoImpl implements BookDao {
      public void save() {
        System.out.println("book dao save ...book_dao_impl");}
      //表示bean初始化操作
      public void init(){ System.out.println("init....");}
      //表示bean销毁前对应的操作
      public void destroy(){ System.out.println("destroy....");}
    }
  配置: <bean id="bookDao" name="dao" class="com.itheima.dao.impl.BookDaoImpl" init-method="init" destroy-method="destroy"/>
  运行:
    ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext1.xml");
    //ctx.registerShutdownHook();   //java虚拟机关闭前关闭ctx, 所有代码运行完之后再关闭
    BookDao bookDao = (BookDao) ctx.getBean("bookDao");
    bookDao.save();
    ctx.close(); //暴力关闭, 代码运行到当前立即关闭   
    //如果不提供ctx关闭的方法,则不会运行bean的销毁函数  原因:java虚拟机关闭,bean未能销毁
方式2.0  接口形式
  实现InitializingBean, DisposableBean接口
    public class BookServiceImpl implements BookService , InitializingBean, DisposableBean {
      private BookDao bookDao;
      public void save() {
        System.out.println("book service save ...bookService_impl");
        bookDao.save();}
      public void setBookDao(BookDao bookDao) {System.out.println("properties setting....");this.bookDao = bookDao;} //运行在afterPropertiesSet()之前
      //非单例模式不执行
      @Override
      public void destroy() throws Exception{System.out.println("service destroy....");}
      @Override  //属性设置完之后运行,例如setBookDao运行完之后运行
      public void afterPropertiesSet() throws Exception{System.out.println("service init....");}
    }
  配置: <bean id="bookService"class="com.itheima.service.impl.BookServiceImpl"> <property name="bookDao" ref="dao"/> </bean>




依赖输入方式
  setter注入
    简单类型
    引用类型(基本数据类型与String)
  构造器注入
    简单类型
    引用类型(基本数据类型与String)
    
setter注入EG
  public class UserDaoImpl implements UserDao {
    private String s1;
    private int num1;
    public void save(){System.out.println("userDaoImpl save ...." + s1 + "," + num1);}
    public void setS1(String s) {this.s1 = s;}
    public void setNum1(int num){this.num1=num;}}
    
  public class BookServiceImpl implements BookService {
    private UserDao userDao;public void setUserDao(UserDao userDao) { System.out.println("properties setting....");this.userDao = userDao;}
    public void save() {
        System.out.println("book service save ...bookService_impl");
        userDao.save();
    }
  }
  配置
    <bean id="userDao" class="com.itheima.dao.impl.UserDaoImpl">
        <property name="s1" value="hahaha"/>
        <property name="num1" value="100"/>
    </bean>
    <bean id="bookService" class="com.itheima.service.impl.BookServiceImpl">
        <property name="userDao" ref="userDao"/>
    </bean>
  
构造器注入EG:
  public class UserDaoImpl implements UserDao {
    private String s1;
    private int num1;
    public void save(){System.out.println("userDaoImpl save ...." + s1 + "," + num1);}
    public UserDaoImpl(String s1, int num1){this.s1=s1;this.num1=num1;}}
    
  public class BookServiceImpl implements BookService {
    private UserDao userDao;
    public void save() {
        System.out.println("book service save ...bookService_impl");
        userDao.save();
    }
    public BookServiceImpl(UserDao userDao) {this.userDao = userDao;}
  }
  配置
    <bean id="userDao" class="com.itheima.dao.impl.UserDaoImpl">
        <!--<constructor-arg name="s1" value="hahaha"/><constructor-arg name="num1" value="666"/>-->  //方式1: 名称,顺序一致
        <!--<constructor-arg type="java.lang.String" value="hahaha"/><constructor-arg type="int" value="666"/>-->  //方式2: 利用type属性解耦
        <constructor-arg index="0" value="hahaha"/><constructor-arg index="1" value="666"/>  //方式3: 利用index顺序解耦
    </bean>

    <bean id="bookService" class="com.itheima.service.impl.BookServiceImpl">
        <constructor-arg name="userDao" ref="userDao"/>
    </bean>
    
依赖注入方式选择
  1.0 强制依赖使用构造器进行, 使用setter注入有概率不进行注入导致null对象出翔
  2.0 可选依赖使用setter注入进行,灵活性强
  3.0 spring框架倡导使用构造器,第三方框架内部大多数采用构造器注入的形式进行数据初始化,相对严谨
  4.0 如果有必要可以两者同时使用
  5.0 实际开发过程依据情况分析,如果受控对象没有提供setter方法就必须使用构造器注入
  6.0 自己开发的模块推荐使用setter注入
  
  
  
  
依赖自动装配
  定义: IoC容器根据bean所依赖的资源在容器中自动查找饼注入到bean中的过程称之为自动装配
  自动装配方式:
    按类型(常用)
    按名称
    按构造方式
    不启用自动装配
public class BookDaoImpl implements BookDao {
    public void save() {System.out.println("book dao save ...book_dao_impl");}}
    
  public class BookServiceImpl implements BookService {
    private BookDao bookDao;
    public void setBookDao(BookDao bookDao) {System.out.println("properties setting....");this.bookDao = bookDao;}
    public void save() {
        System.out.println("book service save ...bookService_impl");bookDao.save();
    }
    public BookServiceImpl() {}
  }
  配置
    <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl"/>

    <bean id="bookService" class="com.itheima.service.impl.BookServiceImpl" autowire="byType"/>  //byName default constructor no
依赖自动转杯特征
  自动装配用于引用类型依赖注入, 不能对蒋丹类型进行操作
  使用按类型装配时(byType)必须保证容器中相同类型的bean唯一, 推荐使用
  使用按名称装配时(byName)必须保证容器中具有指定名称的baen, 因变量名与配置耦合, 不推荐使用
  自动装配优先级地域setter注入与构造器注入, 同时出现时自动转杯失效

    
    
    
    
    
    
   
集合注入
  public class BookDaoImpl implements BookDao {
    public void save() {
        System.out.println("book dao save ...");
        System.out.println("遍历数组:" + Arrays.toString(this.array));
        System.out.println("遍历List" + this.list);
        System.out.println("遍历Set" + this.set);
        System.out.println("遍历Map" + this.map);
        System.out.println("遍历Properties" + this.properties);}
    private int[] array;              public void setArray(int[] array) {this.array = array;}
    private List<String> list;        public void setList(List<String> list) {this.list = list;}
    private Set<String> set;          public void setSet(Set<String> set) {this.set = set;}
    private Map<String,String> map;   public void setMap(Map<String, String> map) {this.map = map;}
    private Properties properties;    public void setProperties(Properties properties) {this.properties = properties;}
  }
  配置
    <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl">
        <property name="array">
            <array><value>11</value><value>22</value></array>
        </property>
        <property name="list">
            <list><value>itcast</value><value>itheima</value></list>
        </property>
        <property name="set">
            <set><value>itcast</value><value>itheima</value></set>
        </property>
        <property name="map">
            <map><entry key="count" value="china"/><entry key="world" value="jojo"/></map>
        </property>
        <property name="properties">
            <props><prop key="country">china</prop><prop key="world">jojo</prop></props>
        </property>
    </bean>






spring管理第三方资源: 数据源对象管理 
配置:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            ">
    <!--管理DruidDataSource对象-->
    <bean id="datasource1" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysq;://localhost:3306/spring_db"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>
    <bean id="datasource2" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysq;://localhost:3306/spring_db"/>
        <property name="user" value="root"/>
        <property name="password" value="root"/>
        <property name="maxPoolSize" value="1000"/>
    </bean>
</beans>
运行:
public class Main {
    public static void main(String[] args) {
        ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
        DataSource db = (DataSource) ctx.getBean("datasource2");
        System.out.println("datasource information: " + db);}
}

加载properties文件
jdbc.properties文件中
  jdbc.driver = com.mysql.jdbc.Driver
  jdbc.url = jdbc:mysql://127.0.0.1:3306/spring_db
  jdbc.username = root
  jdbc.password = root
配置
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"            <!--开启context命名空间-->
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context                       <!--开启context命名空间-->
            http://www.springframework.org/schema/beans/spring-context.xsd      <!--开启context命名空间-->
            ">
    <!--1.0 开启context命名空间-->
    <!--2.0 使用context空间加载properties文件-->
    <!--3.0 使用属性占位符${}读取properties文件中的属性--> <!--*.properties 所有文件--> <!--location="classpath*:*.properties"-->所有路劲下的properties文件
    <context:property-placeholder location="jdbc.properties,potential.properties"  system-properties-mode="NEVER"/>  <!--NEVER不加载系统属性/ENVIRONMENT/FALLBACK/OVERRIDE  -->
    <bean id="datasource2" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
</beans>











spring容器
  创建容器
  获取bean
  容器类层次结构
  BeanFactory  //IoC容器的顶层接口
  
创建容器的方式
  方式1: 类路径加载配置文件
    ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
  方式2: 文件路径加载配置文件
    ApplicationContext ctx = new FileSystemXmlApplicationContext("D:\\SelfProject\\S\\spring_07_auto\\src\\main\\resources\\applicationContext.xml");
  加载多个配置文件
    ApplicationContext ctx = new ClassPathXmlApplicationContext("file1.xml","file2.xml");

获取bean的方式
  方式一: 使用bean名称获取
    BookService bs = (BookService) ctx.getBean("bookService");
  方式二: 使用bean名称获取并且指定类型
    BookService bs = ctx.getBean("bookService", BookService.class);
  方式三: 使用bean类型获取
    BookService bs = ctx.getBean(BookService.class);

BeanFactory  //延迟加载Bean    ApplicationContext是立即加载bean, 启动就已经加载完毕
运行:
  Resource resources = new ClassPathResource("applicationContext.xml")
  BeanFactory bf = new XmlBeanFactory(resource);
  BookDao bookDao = bf.getBean(BookDao.class);
  bookDao.save();}}
配置
  <bean id="bookDao" class="org.example.dao.impl.BookDaoImpl" lazy-init="true"/>  <!--显示表明延迟加载-->

总结:
容器相关
  BeanFactory是IoC容器的顶层接口,初始化BeanFactory对象时,加载的bean延迟加载
  ApplicationContext接口时Spring容器的核心接口,初始化时bean立即加载
  ApplicationContext接口提供基础的bean操作相关方法,通过其他接口拓展其功能
  ApplicationContext接口常用初始化类
    ClassPathXmlApplicationContext
    FileSystemXmlApplicationContext
bean相关
  <bean
    id = "bookDao"                                  bean的id
    name = "name1,name2,name3"                      bean别名
    class = "example.dao.BookDao"                   bean类型,静态工厂类,FactoryBean类
    scope = "singleton"                             控制bean的实例数量
    inti-method = "init"                            生命周期初始化方法
    destroy-method = "destroy"                      生命周期销毁方法
    autowire = "byType"                             自动装配方法
    factory-method = "getInstance"                  bean工厂方法,应用于静态工厂或者实例工厂
    factory-bean = "com.factory.BookDaoFactory"     实例工厂bean
    lazy-init = "true"                              控制bean延迟加载
  />
依赖注入相关
  <bean id="bookService" class="com.service.impl.BookServiceImpl">       
    <constructor-arg name="bookDao" ref="bookDao"/>                           构造器注入引用类型
    <constructor-arg name="userDao" ref="userDao"/>                           构造器注入引用类型
    <constructor-arg name="msg" value="WARN"/>                                构造器注入简单类型
    <constructor-arg type="java.lang.String" index="3" value="WARN"/>         类型匹配与索引匹配
    <property name="bookDao" ref="bookDao"/>                                  setter注入引用类型
    <property name="userDao" ref="userDao"/>                                  setter注入引用类型
    <property name="msg" value="WARN"/>                                       setter注入简单类型
    <property name="names">                                                   setter注入集合类型
      <list>                                                                  list集合
        <value>itcast</value>                                                 集合注入简单类型
        <ref bean="dataSource"/>                                              集合注入引用类型
      </list>
    </property>
  </bean>

